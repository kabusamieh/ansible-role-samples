# Now deal with real user credentials.
- name: "Setup users for MySQL access - localhost"
  mysql_user:
    name: "{{ item.user }}"
    password: "{{ item.password }}"
    priv: "{{ item.db_name }}.*:ALL"
    host: localhost
    state: present
  loop: "{{ mysql_user_list }}"

- name: "Setup users for MySQL access - Other"
  mysql_user:
    name: "{{ item.user }}"
    password: "{{ item.password }}"
    priv: "{{ item.db_name }}.*:ALL"
    host: '%'
    state: present
  loop: "{{ mysql_user_list }}"

- name: "Collect DB list from mysql."
  community.mysql.mysql_info:
    filter: databases
  register: mysql_dbs
  when: mysql_create_readonly_user | bool

- name: "Get list of DB to make readable."
  set_fact:
    readable_dbs: "{{ mysql_dbs.databases | list | difference(mysql_specials_dbs) | list | difference(hidden_dbs) }}"
    readable_priv: ""
  when: mysql_create_readonly_user | bool

- name: "Create readable priv variable."
  set_fact:
    readable_priv: "{{ readable_priv + item + '.*:SELECT/' }}"
  loop: "{{ readable_dbs }}"
  when: mysql_create_readonly_user | bool

- name: "Setup Read-Only User for MySQL access"
  mysql_user:
    name: "{{ mysql_readonly_user }}"
    password: "{{ mysql_readonly_password }}"
    priv: "{{ readable_priv[:-1] }}" # Need to cut the last '/' character from our string construct
    host: "{{ item }}"
    state: present
  loop:
    - localhost
    - "%"
  when: mysql_create_readonly_user | bool

# We need to explicitly remove SUPER here, or we might have problems with read_only enforcement later.
# The mysql_user module doesn't do the right thing here, instead use raw SQL commands.
- name: "Revoke SUPER privileges from non-root users."
  mysql_query:
    query: |
      REVOKE SUPER ON *.* FROM {{ item.user }}@localhost;
      REVOKE SUPER ON *.* FROM {{ item.user }}@'%';
      FLUSH PRIVILEGES;
  loop: "{{ mysql_user_list }}"

- name: "Collect user list from mysql."
  community.mysql.mysql_info:
    filter: users
  register: mysql_users

- name: "Get list of users to keep."
  set_fact:
    users_to_keep: "{{ mysql_user_list | community.general.json_query('[*].user') | list }}"

- name: "Keep the read-only user."
  set_fact:
    users_to_keep: "{{ users_to_keep + [mysql_readonly_user] }}"
  when: mysql_create_readonly_user | bool

- name: "Get list of users to remove."
  set_fact:
    users_to_remove: "{{ mysql_users.users['%'] | list | difference(users_to_keep) }}"

- name: "Remove users that aren't authorized."
  mysql_user:
    name: "{{ item }}"
    host: '%'
    state: absent
  loop: "{{ users_to_remove }}"
